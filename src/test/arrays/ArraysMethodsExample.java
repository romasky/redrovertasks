package test.arrays;

import java.util.Arrays;

public class ArraysMethodsExample {
    public static void main(String[] args) {
        // 1. –û–î–ù–û–ú–ï–†–ù–´–ô –ú–ê–°–°–ò–í
        int[] array1D = {5, 2, 8, 1, 3};

        // 2. –î–í–£–ú–ï–†–ù–´–ô –ú–ê–°–°–ò–í
        int[][] array2D = {
                {3, 5, 1},
                {8, 2, 6},
                {4, 9, 7}
        };

        // 1Ô∏è‚É£ –í—ã–≤–æ–¥ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É
        System.out.println("1. –û–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.toString(array1D));

        // 2Ô∏è‚É£ –í—ã–≤–æ–¥ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É
        System.out.println("2. –î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.deepToString(array2D));

        // 3Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞
        Arrays.sort(array1D);
        System.out.println("3. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.toString(array1D));

        // 4Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ (—Å 1-–≥–æ –ø–æ 3-–π –∏–Ω–¥–µ–∫—Å)
        int[] partialArray = {5, 2, 8, 1, 3, 6, 7};
        Arrays.sort(partialArray, 1, 4);
        System.out.println("4. –ß–∞—Å—Ç–∏—á–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.toString(partialArray));

        // 5Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º 9
        Arrays.fill(array1D, 9);
        System.out.println("5. –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.toString(array1D));

        // 6Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞
        Arrays.fill(array1D, 1, 4, 5);
        System.out.println("6. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞: " + Arrays.toString(array1D));

        // 7Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        int[] copiedArray = Arrays.copyOf(array1D, array1D.length);
        System.out.println("7. –ö–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞: " + Arrays.toString(copiedArray));

        // 8Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ (–ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞)
        int[] copiedPartialArray = Arrays.copyOfRange(array1D, 0, 3);
        System.out.println("8. –ö–æ–ø–∏—è —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞: " + Arrays.toString(copiedPartialArray));

        // 9Ô∏è‚É£ –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º!)
        int[] searchArray = {1, 3, 5, 7, 9};
        Arrays.sort(searchArray);
        int index = Arrays.binarySearch(searchArray, 5);
        System.out.println("9. –≠–ª–µ–º–µ–Ω—Ç '5' –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: " + index);

        // üîü –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
        boolean areEqual = Arrays.equals(array1D, copiedArray);
        System.out.println("10. –û–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ –º–∞—Å—Å–∏–≤—ã? " + areEqual);

        // 1Ô∏è‚É£1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–≤—É–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
        int[][] anotherArray2D = {
                {3, 5, 1},
                {8, 2, 6},
                {4, 9, 7}
        };
        boolean are2DEqual = Arrays.deepEquals(array2D, anotherArray2D);
        System.out.println("11. –û–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ –¥–≤—É–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã? " + are2DEqual);

        // 1Ô∏è‚É£2Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        int[] clonedArray = array1D.clone();
        System.out.println("12. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.toString(clonedArray));

        // 1Ô∏è‚É£3Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
        int[][] clonedArray2D = array2D.clone();
        System.out.println("13. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.deepToString(clonedArray2D));

        // 1Ô∏è‚É£4Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        int[][] filled2DArray = new int[3][3];
        for (int[] row : filled2DArray) {
            Arrays.fill(row, 7);
        }
        System.out.println("14. –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.deepToString(filled2DArray));

        // 1Ô∏è‚É£5Ô∏è‚É£ –ü–µ—á–∞—Ç—å —Ö—ç—à-–∫–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤
        System.out.println("15. HashCode array1D: " + Arrays.hashCode(array1D));
        System.out.println("16. HashCode array2D: " + Arrays.deepHashCode(array2D));

        // 1Ô∏è‚É£6Ô∏è‚É£ –†–∞–∑–≤–æ—Ä–æ—Ç –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        int[] array1Dv2 = {5, 2, 8, 1, 3};
        int[] result = new int[array1Dv2.length];
        for (int i = 0; i < array1Dv2.length; i++) {
            result[array1Dv2.length-i-1]=array1Dv2[i];
        }
        System.out.println("16. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –º–∞—Å—Å–∏–≤: " + Arrays.toString(result));
    }


}